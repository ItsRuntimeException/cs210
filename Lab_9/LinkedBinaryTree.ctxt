#BlueJ class context
comment0.params=
comment0.target=LinkedBinaryTree()
comment0.text=\r\n\ \ \ \ \ Creates\ an\ empty\ binary\ tree.\r\n
comment1.params=element
comment1.target=LinkedBinaryTree(java.lang.Object)
comment1.text=\r\n\ \ \ \ \ Creates\ a\ binary\ tree\ with\ the\ specified\ element\ as\ its\ root.\r\n
comment10.params=targetElement\ next
comment10.target=BinaryTreeNode\ findAgain(java.lang.Object,\ BinaryTreeNode)
comment10.text=\r\n\ \ \ \ \ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ \ \ \ \ found\ in\ this\ binary\ tree.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ \ \ \ \ Returns\ a\ string\ representation\ of\ this\ binary\ tree.\r\n
comment12.params=
comment12.target=java.util.Iterator\ iteratorInOrder()
comment12.text=\r\n\ \ \ \ \ Performs\ an\ inorder\ traversal\ on\ this\ binary\ tree\ by\ calling\ an\r\n\ \ \ \ \ overloaded,\ recursive\ inorder\ method\ that\ starts\ with\r\n\ \ \ \ \ the\ root.\r\n
comment13.params=
comment13.target=java.util.Iterator\ iteratorPreOrder()
comment13.text=\r\n\ \ \ \ \ Performs\ an\ preorder\ traversal\ on\ this\ binary\ tree\ by\ calling\ \r\n\ \ \ \ \ an\ overloaded,\ recursive\ preorder\ method\ that\ starts\ with\r\n\ \ \ \ \ the\ root.\r\n
comment14.params=
comment14.target=java.util.Iterator\ iteratorPostOrder()
comment14.text=\r\n\ \ \ \ \ Performs\ an\ postorder\ traversal\ on\ this\ binary\ tree\ by\ calling\r\n\ \ \ \ \ an\ overloaded,\ recursive\ postorder\ method\ that\ starts\r\n\ \ \ \ \ with\ the\ root.\r\n
comment15.params=
comment15.target=java.util.Iterator\ iteratorLevelOrder()
comment15.text=\r\n\ \ \ \ \ Performs\ a\ levelorder\ traversal\ on\ this\ binary\ tree,\ using\ a\r\n\ \ \ \ \ java.util.LinkedList\ templist.\r\n
comment16.params=
comment16.target=void\ rotateRight()
comment17.params=
comment17.target=void\ rotateLeft()
comment2.params=element\ leftSubtree\ rightSubtree
comment2.target=LinkedBinaryTree(java.lang.Object,\ LinkedBinaryTree,\ LinkedBinaryTree)
comment2.text=\r\n\ \ \ \ \ Constructs\ a\ binary\ tree\ from\ the\ two\ specified\ binary\ trees.\r\n
comment3.params=
comment3.target=void\ removeLeftSubtree()
comment3.text=\r\n\ \ \ \ \ Removes\ the\ left\ subtree\ of\ this\ binary\ tree.\r\n
comment4.params=
comment4.target=void\ removeRightSubtree()
comment4.text=\r\n\ \ \ \ \ Removes\ the\ right\ subtree\ of\ this\ binary\ tree.\r\n
comment5.params=
comment5.target=void\ removeAllElements()
comment5.text=\r\n\ \ \ \ \ Deletes\ all\ nodes\ from\ this\ binary\ tree.\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ \ \ \ \ Returns\ true\ if\ this\ binary\ tree\ is\ empty\ and\ false\ otherwise.\r\n
comment7.params=
comment7.target=int\ size()
comment7.text=\r\n\ \ \ \ \ Returns\ true\ if\ this\ binary\ tree\ is\ empty\ and\ false\ otherwise.\r\n
comment8.params=targetElement
comment8.target=boolean\ contains(java.lang.Object)
comment8.text=\r\n\ \ \ \ \ Returns\ true\ if\ this\ tree\ contains\ an\ element\ that\ matches\ the\r\n\ \ \ \ \ specified\ target\ element\ and\ false\ otherwise.\r\n
comment9.params=targetElement
comment9.target=java.lang.Object\ find(java.lang.Object)
comment9.text=\r\n\ \ \ \ \ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ \ \ \ \ found\ in\ this\ binary\ tree.\ \ Returns\ a\ null\ reference\ value\ if\r\n\ \ \ \ \ the\ specified\ target\ element\ is\ not\ found\ in\ the\ binary\ tree.\r\n
numComments=18
